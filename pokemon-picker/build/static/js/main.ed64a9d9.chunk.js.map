{"version":3,"sources":["Components/PokemonBox/PokemonBox.js","Components/LoadScreen/LoadScreen.js","App.js","Components/PokemonDetails/PokemonDetails.js","Components/Router.js","serviceWorker.js","index.js"],"names":["PokemonBox","pokemons","map","pokemon","index","key","src","imgUrl","alt","name","width","to","pathname","state","LoadScreen","Component","App","props","isLoading","items","fetch","then","res","json","result","url","results","Promise","all","setState","species","sprites","front_default","this","PokemonDetails","location","Router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAqBeA,MAlBf,YAEI,OAF4B,EAAXC,SAEDC,KAAI,SAACC,EAASC,GAAV,OAChB,yBAAKC,IAAKD,GACN,yBAAKE,IAAKH,EAAQI,OAAQC,IAAKL,EAAQM,KAAMC,MAAM,QACnD,gCACI,kBAAC,IAAD,CAAMC,GAAI,CACNC,SAAS,YAAD,OAAcR,EAAM,GAC5BS,MAAO,CACH,KAAQV,EAAQM,KAChB,OAAUN,EAAQI,UAJ1B,sBCCDO,E,iLANP,OACI,+C,GAHaC,aCwDVC,E,YAlDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDJ,MAAQ,CACTK,WAAW,EACXC,MAAO,IAJI,E,iFAQE,IAAD,OAMhBC,MAAM,6CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACH,IAAMC,EAAKD,EAAOE,QAAQxB,KAAI,SAAAoB,GAC1B,OAAOA,EAAIG,OAGfE,QAAQC,IAAI,YAAIH,GAAKvB,KAAI,SAACuB,GAAD,OACrBL,MAAMK,GACDJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAEpBF,MAAK,SAAAC,GACF,EAAKO,SAAS,CACVX,WAAW,EACXC,MAAO,YAAIG,GAAKpB,KAAI,SAAAoB,GAChB,MAAO,CAAE,KAAQA,EAAIQ,QAAQrB,KAAM,OAAUa,EAAIS,QAAQC,4B,+BAQjF,IAAM/B,EAAWgC,KAAKpB,MAAMM,MAE5B,OACI,6BACKc,KAAKpB,MAAMK,UACR,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYjB,SAAUA,S,GA7CxBc,aCYHmB,E,iLAbP,IAAMrB,EAAQoB,KAAKhB,MAAMkB,SAAStB,MAClC,OACI,6BACI,6BAAMA,EAAMJ,MACZ,yBAAKH,IAAKO,EAAMN,OAAQC,IAAKK,EAAMJ,OACnC,gCACI,kBAAC,IAAD,CAAME,GAAI,CAAEC,SAAU,MAAtB,c,GARSG,aCYdqB,EATA,kBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWtB,EAAKuB,OAAK,IACrC,kBAAC,IAAD,CAAOF,KAAK,eAAeC,UAAWJ,OCE9BM,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.ed64a9d9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction PokemonBox({pokemons}) {\r\n\r\n    return pokemons.map((pokemon, index) => (\r\n        <div key={index}>\r\n            <img src={pokemon.imgUrl} alt={pokemon.name} width='200'/>\r\n            <button>\r\n                <Link to={{\r\n                    pathname: `/pokemon/${index+1}`,\r\n                    state: {\r\n                        'name': pokemon.name,\r\n                        'imgUrl': pokemon.imgUrl\r\n                    }\r\n                }}>Show Details</Link>\r\n            </button>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default PokemonBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass LoadScreen extends Component {\r\n    render() {\r\n        return(\r\n            <div>LoadScreen</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoadScreen;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport PokemonBox from \"./Components/PokemonBox/PokemonBox\";\r\nimport LoadScreen from \"./Components/LoadScreen/LoadScreen\";\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            items: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // const range = [...Array(9).keys()];\r\n        // const url = [];\r\n        // range.map(number => url.push('https://pokeapi.co/api/v2/pokemon/'+ (number+1)));\r\n\r\n\r\n        fetch('https://pokeapi.co/api/v2/pokemon?limit=9')\r\n            .then(res => res.json())\r\n            .then((result) => {\r\n                const url =result.results.map(res => {\r\n                    return res.url\r\n                });\r\n\r\n                Promise.all([...url].map((url) =>\r\n                    fetch(url)\r\n                        .then(res => res.json())\r\n                ))\r\n                    .then(res => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            items: [...res].map(res => {\r\n                                return { 'name': res.species.name, 'imgUrl': res.sprites.front_default}\r\n                            })\r\n                        });\r\n                    })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const pokemons = this.state.items;\r\n\r\n        return(\r\n            <div>\r\n                {this.state.isLoading ?\r\n                    <LoadScreen /> :\r\n                    <PokemonBox pokemons={pokemons}/>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass PokemonDetails extends Component {\r\n    render() {\r\n        const state = this.props.location.state;\r\n        return(\r\n            <div>\r\n                <div>{state.name}</div>\r\n                <img src={state.imgUrl} alt={state.name}/>\r\n                <button>\r\n                    <Link to={{ pathname: '/'}}>Back</Link>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PokemonDetails;\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport App from '../App';\r\nimport PokemonDetails from \"./PokemonDetails/PokemonDetails\";\r\n\r\nconst Router = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/\" component={App} exact />\r\n            <Route path=\"/pokemon/:id\" component={PokemonDetails}/>\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Router from \"./Components/Router\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Router />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}